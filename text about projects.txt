I am currently developing an AI-powered Tic Tac Toe game in Python, with a focus on deepening my understanding of the Minimax algorithm. I've additionally added the ability to play a fully randomized version of tic tac toe where the CPU player mindlessly selections an option, however my primary goal is to explore how the Minimax function operates to determine the most optimal move in games like Tic Tac Toe. The Minimax algorithm, a classic decision-making approach used in game theory, evaluates possible game outcomes by simulating all potential moves and counter-moves, assuming that both players will play optimally. Through this project, I am gaining practical experience in implementing the Minimax algorithm, handling game states, and refining my understanding of recursion, as the function recursively assesses the value of each move, ultimately choosing the one that leads to the best possible outcome for the AI. This project allows me to further strengthen my problem-solving abilities and coding skills in Python, while also expanding my knowledge of algorithmic approaches in game development.

To refresh and enhance my Python programming skills, which I haven't used extensively since my first year of university, I decided to undertake a personal project of creating a simple chess game. This project serves as a practical exercise to rebuild my proficiency in Python by applying object-oriented programming principles, managing complex data structures like the chessboard, and implementing game logic. Developing the chess game involves building classes for pieces, handling game rules, such as legal moves, capturing, and check conditions, as well as designing an intuitive user interface for players to interact with. Through this project, I’m not only sharpening my Python skills but also gaining hands-on experience with algorithmic thinking, such as move validation, state tracking, and potentially exploring more advanced concepts like AI-driven move suggestions. Overall, it’s a comprehensive way for me to strengthen my coding foundation while working on a challenging yet rewarding project which can be found here.

I created this game as part of my game design course, marking my first experience working with a game engine, specifically Unity. Learning how to build a game from scratch while using Unity was both an exciting and challenging journey. Initially, understanding Unity’s interface and how its various components—like physics, game objects, and scripting—interact was overwhelming. I often found myself having to experiment and troubleshoot to get the desired behaviors for things like collision detection, character movement, and the random generation of obstacles. However, this also allowed me to explore key game development concepts such as level design, asset management, and scripting in C#, which ultimately strengthened my problem-solving skills. Despite the frustration of debugging and navigating the learning curve, seeing my game take shape and function as intended was incredibly satisfying making me appreciate the game developers who have created the games I love even more. It gave me a foundational understanding of game development, especially within Unity, and sparked my interest in exploring more complex game mechanics and designs in the future.